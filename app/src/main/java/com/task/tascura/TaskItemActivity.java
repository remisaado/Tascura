package com.task.tascura;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.DividerItemDecoration;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Canvas;
import android.os.Bundle;
import android.view.View;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DatabaseReference;

import java.util.ArrayList;

import it.xabaras.android.recyclerview.swipedecorator.RecyclerViewSwipeDecorator;

public class TaskItemActivity extends AppCompatActivity {

    private RecyclerView recyclerView;
    RecyclerView.LayoutManager layoutManager;
    SubTasksRecyclerViewAdapter subTasksRecyclerViewAdapter;
    EditText informationEditText;
    EditText subTaskEditText;
    FirebaseAuth mAuth;
    String categoryId;
    String taskId;
    Task superTask;
    private FirebaseHelper firebaseHelper;

    ArrayList<SubTask> list = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_task_item);

        RelativeLayout relativeLayout = findViewById(R.id.relativeLayout);
        recyclerView = findViewById(R.id.recyclerView);
        TextView superTaskTextView = findViewById(R.id.superTaskTextView);
        informationEditText = findViewById(R.id.informationEditText);
        subTaskEditText = findViewById(R.id.subTaskEditText);

        mAuth = FirebaseAuth.getInstance();

        firebaseHelper = new FirebaseHelper();

        Intent intent = getIntent();
        superTask = intent.getParcelableExtra(MainActivity.KEY_NAME);
        list.addAll(superTask.getSubTasksList());

        SharedPreferences sharedPrefs = this.getSharedPreferences(MainActivity.SHARED_PREFS, 0);
        categoryId = sharedPrefs.getString(MainActivity.CATEGORY_ID_CHOICE, "");

        superTaskTextView.setText(superTask.getTaskName());
        informationEditText.setText(superTask.getTaskInformation());
        taskId = superTask.getTaskId();

        initRecyclerView();

        relativeLayout.setOnClickListener(v -> finish());

        subTaskEditText.setOnEditorActionListener(editorActionListener);
        informationEditText.setOnEditorActionListener(editorActionListener);
        informationEditText.setOnFocusChangeListener(onFocusChangeListener);
    }

    private void initRecyclerView()
    {
        // Initializes and sets up a RecyclerView with a
        // LinearLayoutManager and a RecyclerViewAdapter to display a list of items.
        layoutManager = new LinearLayoutManager(this);
        recyclerView.setLayoutManager(layoutManager);
        subTasksRecyclerViewAdapter = new SubTasksRecyclerViewAdapter(list, superTask);
        recyclerView.setAdapter(subTasksRecyclerViewAdapter);
        // Attaches an ItemTouchHelper to the RecyclerView for swipe functionality.
        new ItemTouchHelper(itemTouchHelperCallback).attachToRecyclerView(recyclerView);

        // Adds a divider between each item in the list using a DividerItemDecoration.
        DividerItemDecoration dividerItemDecoration = new DividerItemDecoration(this, DividerItemDecoration.VERTICAL);
        dividerItemDecoration.setDrawable(getResources().getDrawable(R.drawable.divider_line, null));
        recyclerView.addItemDecoration(dividerItemDecoration);
    }

    private final TextView.OnEditorActionListener editorActionListener = (textView, i, keyEvent) ->
    {
        // Calls method when the IME Button is pressed depending on which EditText it was pressed in.

        if (subTaskEditText.equals(textView))
        {
            onAddSubTaskClick();
        }
        else if (informationEditText.equals(textView))
        {
            onAddInformationClick();
        }

        return true;
    };

    private final View.OnFocusChangeListener onFocusChangeListener = (view, hasFocus) -> {
        // Update task information when focus is lost from informationEditText.
        if (!hasFocus)
        {
            onAddInformationClick();
        }
    };

    private void onAddSubTaskClick()
    {
        // Adds a subtask to the list ArrayList and the Firebase database.

        DatabaseReference databaseReference = firebaseHelper.getDatabaseReference()
                .child(categoryId).child(DatabaseNodes.TASKS).child(taskId).child(DatabaseNodes.SUB_TASKS_LIST);

        String text = subTaskEditText.getText().toString();

        if (text.trim().length() > 0)
        {
            String autoGeneratedId = databaseReference.push().getKey();

            if(autoGeneratedId != null)
            {
                SubTask newSubTask = new SubTask.SubTaskBuilder()
                        .subTaskName(text)
                        .subTaskId(autoGeneratedId)
                        .isChecked(false)
                        .build();

                list.add(newSubTask);

                subTasksRecyclerViewAdapter.notifyItemInserted(list.size() - 1);

                subTaskEditText.getText().clear();

                databaseReference.child(autoGeneratedId).setValue(newSubTask);
            }
        }
    }

    private void onAddInformationClick()
    {
        // Adds/edits task information of task.

        DatabaseReference databaseReference = firebaseHelper.getDatabaseReference()
                .child(categoryId).child(DatabaseNodes.TASKS).child(taskId);

        String text = informationEditText.getText().toString();

        databaseReference.child(DatabaseNodes.TASK_INFORMATION).setValue(text);
    }

    ItemTouchHelper.SimpleCallback itemTouchHelperCallback = new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT)
    {
        @Override
        public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target)
        {
            return false;
        }

        @Override
        public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction)
        {
            // Deletes a subtask item from the list ArrayList and the
            // Firebase database on left swipe in the RecyclerView.

            DatabaseReference databaseReference = firebaseHelper.getDatabaseReference()
                    .child(categoryId).child(DatabaseNodes.TASKS).child(taskId).child(DatabaseNodes.SUB_TASKS_LIST);

            String subTaskId = list.get(viewHolder.getBindingAdapterPosition()).getSubTaskId();

            list.remove(viewHolder.getBindingAdapterPosition());

            databaseReference.child(subTaskId).removeValue();

            subTasksRecyclerViewAdapter.notifyDataSetChanged();
        }

        @Override
        public void onChildDraw(@NonNull Canvas c, @NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive)
        {
            // Draws a red background and a trash can icon to the left swipe.

            new RecyclerViewSwipeDecorator.Builder(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive)
                    .addSwipeLeftBackgroundColor(ContextCompat.getColor(TaskItemActivity.this, R.color.colorRed))
                    .addSwipeLeftActionIcon(R.drawable.ic_delete_24dp)
                    .create()
                    .decorate();

            super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
        }
    };

    @Override
    protected void onStop() {
        super.onStop();
        // Calls onAddInformationClick onStop to edit task information
        // before leaving activity, in case any changes were made before last save.
        onAddInformationClick();
    }
}
